import React, { Component } from 'react';
import Video from 'twilio-video';
import axios from 'axios';
import RaisedButton from 'material-ui/RaisedButton';
import TextField from 'material-ui/TextField';
import { Card, CardHeader, CardText } from 'material-ui/Card';
/*import accessToken from './token'*/


export default class VideoCall extends Component {
 constructor(props) {
   super();
   this.state = {
      identity: 'temi',  /* Will hold the fake name assigned to the client. The name is generated by faker on the server */
      roomName: '',    /* Will store the room name */
      roomNameErr: false,  /* Track error for room name TextField. This will    enable us to show an error message when this variable is true */
      previewTracks: null,
      localMediaAvailable: false, /* Represents the availability of a LocalAudioTrack(microphone) and a LocalVideoTrack(camera) */
      hasJoinedRoom: false,
      activeRoom: null, // Track the current active room
      token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImN0eSI6InR3aWxpby1mcGE7dj0xIn0.eyJqdGkiOiJTS2NiZTJjOGU3YzQ2MWY2OTQwMjI3YTg1Y2E2ZDVjNzM1LTE1MzY1ODc2MzgiLCJpc3MiOiJTS2NiZTJjOGU3YzQ2MWY2OTQwMjI3YTg1Y2E2ZDVjNzM1Iiwic3ViIjoiQUNmMmRhNzAxM2I4MDg2YWEzYTNkNDdjOTc4OWE4MTQ4OSIsImV4cCI6MTUzNjU5MTIzOCwiZ3JhbnRzIjp7ImlkZW50aXR5IjoidGVtaSIsInZpZGVvIjp7InJvb20iOiJUZW1pIn19fQ.tKlhmj8PYXZIJTBFuaCf0lT2rMtYdATm7fSAH6HeXXI"};

   this.joinRoom = this.joinRoom.bind(this);
   this.handleRoomNameChange = this.handleRoomNameChange.bind(this);
   this.roomJoined = this.roomJoined.bind(this);
 }



 componentDidMount() {
   /*axios.get('/token').then(results => {


      const { identity, token } = results.data;
      this.setState({ identity, token });
    });*/

  }

  handleRoomNameChange(e) {
   /* Fetch room name from text field and update state */
    let roomName = e.target.value;
    this.setState({ roomName });
  }

  joinRoom() {
    /*
  Show an error message on room name text field if user tries         joining a room without providing a room name. This is enabled by setting `roomNameErr` to true
   */
    if (!this.state.roomName.trim()) {
      this.setState({ roomNameErr: true });
      return;
    }

    console.log("Joining room '" + this.state.roomName + "'...");
    console.log(this.state)
    let connectOptions = {
    name: this.state.roomName
    };

    if (this.state.previewTracks) {
      connectOptions.tracks = this.state.previewTracks;
    }

         /*
  Connect to a room by providing the token and connection    options that include the room name and tracks. We also show an alert if an error occurs while connecting to the room.
  */
    Video.connect(this.state.token, connectOptions).then(this.roomJoined, error => {
     alert('Could not connect to Twilio: ' + error.message);
    });
  }

  attachTracks(tracks, container) {
    tracks.forEach(track => {
      container.appendChild(track.attach());
    });
  }

  attachParticipantTracks(participant, container) {
    var tracks = Array.from(participant.tracks.values());
    this.attachTracks(tracks, container);
  }

  roomJoined(room) {
    // Called when a participant joins a room
    console.log("Joined as '" + this.state.identity + "'");
    this.setState({
      activeRoom: room,
      localMediaAvailable: true,
      hasJoinedRoom: true  // Removes ‘Join Room’ button and shows ‘Leave Room’
    });

    var previewContainer = this.refs.localMedia;
    if (!previewContainer.querySelector('video')) {
      this.attachParticipantTracks(room.localParticipant, previewContainer);
    }
  }

render() {
 /*
  Controls showing of the local track
  Only show video track after user has joined a room else show nothing
 */
   let showLocalTrack = this.state.localMediaAvailable ? (
     <div className="flex-item"><div ref="localMedia" /> </div>) : '';
   /*
    Controls showing of ‘Join Room’ or ‘Leave Room’ button.
    Hide 'Join Room' button if user has already joined a room otherwise
    show `Leave Room` button.
   */
   let joinOrLeaveRoomButton = this.state.hasJoinedRoom ? (
   <RaisedButton label="Leave Room" secondary={true} onClick={() => alert("Leave Room")}  />) : (
   <RaisedButton label="Join Room" primary={true} onClick={this.joinRoom} />);
   return (
     <Card>
     <CardText>
       <div className="flex-container">
     {showLocalTrack} {/* Show local track if available */}
     <div className="flex-item">
     {/*
  The following text field is used to enter a room name. It calls  `handleRoomNameChange` method when the text changes which sets the `roomName` variable initialized in the state.
     */}
     <TextField hintText="Room Name" onChange={this.handleRoomNameChange}
  errorText = {this.state.roomNameErr ? 'Room Name is required' : undefined}
      /><br />
     {joinOrLeaveRoomButton}  {/* Show either ‘Leave Room’ or ‘Join Room’ button */}
      </div>
     {/*
  The following div element shows all remote media (other                             participant’s tracks)
     */}
     <div className="flex-item" ref="remoteMedia" id="remote-media" />
   </div>
  </CardText>
     </Card>
   );
 }

}
